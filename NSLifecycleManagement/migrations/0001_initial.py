# Generated by Django 2.2 on 2020-01-31 14:18

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CpGroupInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('forwardingBehaviour', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExtLinkPortInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cpInstanceId', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExtManagedVirtualLinkInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('vnfVirtualLinkDescId', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ExtVirtualLinkInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='NfpInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nfpdId', models.TextField(blank=True, null=True)),
                ('nfpName', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('totalCp', models.TextField(blank=True, null=True)),
                ('nfpState', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='NfpRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('etherDestinationAddress', models.TextField(blank=True, null=True)),
                ('etherSourceAddress', models.TextField(blank=True, null=True)),
                ('etherType', models.TextField(blank=True, null=True)),
                ('vlanTag', models.TextField(blank=True, null=True)),
                ('protocol', models.TextField(blank=True, null=True)),
                ('dscp', models.TextField(blank=True, null=True)),
                ('sourceIpAddressPrefix', models.TextField(blank=True, null=True)),
                ('destinationIpAddressPrefix', models.TextField(blank=True, null=True)),
                ('nfpRule',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='NfpInfo_nfpRule',
                                      to='NSLifecycleManagement.NfpInfo')),
            ],
        ),
        migrations.CreateModel(
            name='NsInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nsInstanceName', models.TextField()),
                ('nsInstanceDescription', models.TextField()),
                ('nsdId', models.TextField()),
                ('nsdInfoId', models.TextField()),
                ('flavourId', models.TextField(blank=True, null=True)),
                ('nestedNsInstanceId', models.TextField(blank=True, null=True)),
                ('nsState', models.TextField(default='NOT_INSTANTIATED')),
            ],
        ),
        migrations.CreateModel(
            name='NsLinkPortInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='NsVirtualLinkInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nsVirtualLinkDescId', models.TextField()),
                ('nsVirtualLinkProfileld', models.TextField()),
                ('virtualLinkInfo',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='NsInstance_virtualLinkInfo', to='NSLifecycleManagement.NsInstance')),
            ],
        ),
        migrations.CreateModel(
            name='VnfcResourceInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('vduId', models.TextField()),
                ('storageResourceIds', models.TextField()),
                ('reservationId', models.TextField()),
                ('metadata', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='VnfExtCpInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cpdId', models.TextField()),
                ('extLinkPortId', models.TextField()),
                ('metadata', models.TextField()),
                ('associatedVnfcCpId', models.TextField()),
                ('associatedVnfVirtualLinkId', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='VnfVirtualLinkResourceInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('vnfVirtualLinkDescId', models.TextField()),
                ('reservationId', models.TextField()),
                ('metadata', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='VnfInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('vnfInstanceName', models.TextField(blank=True, null=True)),
                ('vnfInstanceDescription', models.TextField(blank=True, null=True)),
                ('vnfdId', models.TextField()),
                ('vnfProvider', models.TextField()),
                ('vnfProductName', models.TextField()),
                ('vnfSoftwareVersion', models.TextField()),
                ('vnfdVersion', models.TextField()),
                ('vnfPkgId', models.TextField()),
                ('vnfConfigurableProperties', models.TextField(blank=True, null=True)),
                ('vimId', models.TextField(blank=True, null=True)),
                ('instantiationState', models.TextField(default='NOT_INSTANTIATED')),
                ('metadata', models.TextField(blank=True, null=True)),
                ('extensions', models.TextField(blank=True, null=True)),
                ('vnfInstance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                  related_name='NsInstance_VnfInstance',
                                                  to='NSLifecycleManagement.NsInstance')),
            ],
        ),
        migrations.CreateModel(
            name='SapInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sapdId', models.TextField()),
                ('sapName', models.TextField()),
                ('description', models.TextField()),
                ('vnfInstance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                  related_name='NsInstance_SapInfo',
                                                  to='NSLifecycleManagement.NsInstance')),
            ],
        ),
        migrations.CreateModel(
            name='VnfcCpInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cpdId', models.TextField()),
                ('vnfExtCpId', models.TextField(blank=True, null=True)),
                ('vnfLinkPortId', models.TextField(blank=True, null=True)),
                ('metadata', models.TextField(blank=True, null=True)),
                ('vnfcCpInfo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                 related_name='VnfcResourceInfo_vnfcResourceInfo',
                                                 to='NSLifecycleManagement.VnfcResourceInfo')),
            ],
        ),
        migrations.CreateModel(
            name='CpProtocolInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layerProtocol', models.TextField()),
                ('sapInfo_cpProtocolInfo',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='SapInfo_CpProtocolInfo', to='NSLifecycleManagement.SapInfo')),
                ('vnfExtCpInfo_cpProtocolInfo',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='VnfExtCpInfo_CpProtocolInfo',
                                   to='NSLifecycleManagement.VnfExtCpInfo')),
                ('vnfcCpInfo_cpProtocolInfo',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='VnfcCpInfo_CpProtocolInfo', to='NSLifecycleManagement.VnfcCpInfo')),
            ],
        ),
        migrations.CreateModel(
            name='IpOverEthernetAddressInfo',
            fields=[
                ('ipOverEthernet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True,
                                                        related_name='CpProtocolInfo_IpOverEthernetAddressInfo',
                                                        serialize=False, to='NSLifecycleManagement.CpProtocolInfo')),
                ('macAddress', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='IpAddresses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.TextField()),
                ('addresses', models.TextField(blank=True, null=True)),
                ('isDynamic', models.BooleanField(blank=True, null=True)),
                ('subnetId', models.TextField(blank=True, null=True)),
                ('ipAddresses', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                  related_name='IpOverEthernetAddressInfo_IpAddresses',
                                                  to='NSLifecycleManagement.IpOverEthernetAddressInfo')),
            ],
        ),
        migrations.CreateModel(
            name='AddressRange',
            fields=[
                ('addressRange', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True,
                                                      related_name='IpAddresses_AddressRange', serialize=False,
                                                      to='NSLifecycleManagement.IpAddresses')),
                ('minAddress', models.TextField()),
                ('maxAddress', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ForwardingBehaviourInputParameters',
            fields=[
                ('nsLinkPortInfo_nsCpHandle',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True,
                                      related_name='CpGroupInfo_ForwardingBehaviourInputParameters', serialize=False,
                                      to='NSLifecycleManagement.CpGroupInfo')),
                ('algortihmName', models.TextField(blank=True, null=True)),
                ('algorithmWeights', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='InstantiatedVnfInfo',
            fields=[
                ('instantiatedVnfInfo',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True,
                                      related_name='VnfInstance_instantiatedVnfInfo', serialize=False,
                                      to='NSLifecycleManagement.VnfInstance')),
                ('flavourId', models.TextField(blank=True, null=True)),
                ('vnfState', models.TextField(default='STOPPED')),
                ('localizationLanguage', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NsInstanceLinks',
            fields=[
                ('_links', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True,
                                                related_name='NsInstance_links', serialize=False,
                                                to='NSLifecycleManagement.NsInstance')),
                ('link_self', models.URLField()),
                ('nestedNsInstances', models.TextField(blank=True, null=True)),
                ('instantiate', models.URLField(blank=True, null=True)),
                ('terminate', models.URLField(blank=True, null=True)),
                ('update', models.URLField(blank=True, null=True)),
                ('scale', models.URLField(blank=True, null=True)),
                ('heal', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='VnfLinkPortInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cpInstanceId', models.TextField(blank=True, null=True)),
                ('cpInstanceType', models.TextField(blank=True, null=True)),
                ('extManagedVirtualLinkInfo_vnfLinkPorts',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='ExtManagedVirtualLinkInfo_VnfLinkPortInfo',
                                   to='NSLifecycleManagement.ExtManagedVirtualLinkInfo')),
                ('vnfVirtualLinkResourceInfo_vnfLinkPorts',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='VnfVirtualLinkResourceInfo_VnfLinkPortInfo',
                                   to='NSLifecycleManagement.VnfVirtualLinkResourceInfo')),
            ],
        ),
        migrations.CreateModel(
            name='VnffgInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('vnffgdId', models.TextField()),
                ('vnfInstanceId', models.TextField(blank=True, null=True)),
                ('nsVirtualLinkInfoId', models.TextField(blank=True, null=True)),
                ('vnffgInfo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                related_name='NsInstance_VnffgInfo',
                                                to='NSLifecycleManagement.NsInstance')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceHandle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('vimId', models.TextField(blank=True, null=True)),
                ('resourceProviderId', models.TextField(blank=True, null=True)),
                ('resourceId', models.TextField()),
                ('vimLevelResourceType', models.TextField(blank=True, null=True)),
                ('extLinkPortInfo_resourceHandle',
                 models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                      related_name='ExtLinkPortInfo_ResourceHandle',
                                      to='NSLifecycleManagement.ExtLinkPortInfo')),
                ('extManagedVirtualLinkInfo_networkResource',
                 models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                      related_name='ExtManagedVirtualLinkInfo_ResourceHandle',
                                      to='NSLifecycleManagement.ExtManagedVirtualLinkInfo')),
                ('extVirtualLinkInfo_resourceHandle',
                 models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                      related_name='ExtVirtualLinkInfo_ResourceHandle',
                                      to='NSLifecycleManagement.ExtVirtualLinkInfo')),
                ('nsLinkPortInfo_resourceHandle',
                 models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                      related_name='NsLinkPortInfo_ResourceHandle',
                                      to='NSLifecycleManagement.NsLinkPortInfo')),
                ('nsVirtualLinkInfo_resourceHandle',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='NsVirtualLinkInfo_ResourceHandle',
                                   to='NSLifecycleManagement.NsVirtualLinkInfo')),
                ('virtualStorageResourceInfo_storageResource',
                 models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                      related_name='VirtualStorageResourceInfo_ResourceHandle',
                                      to='NSLifecycleManagement.VnfLinkPortInfo')),
                ('vnfLinkPortInfo_resourceHandle',
                 models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                      related_name='VnfLinkPortInfo_ResourceHandle',
                                      to='NSLifecycleManagement.VnfLinkPortInfo')),
                ('vnfVirtualLinkResourceInfo_networkResource',
                 models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                      related_name='VnfVirtualLinkResourceInfo_ResourceHandle',
                                      to='NSLifecycleManagement.VnfLinkPortInfo')),
                ('vnfcResourceInfo_computeResource',
                 models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                      related_name='VnfcResourceInfo_ResourceHandle',
                                      to='NSLifecycleManagement.VnfLinkPortInfo')),
            ],
        ),
        migrations.CreateModel(
            name='PortRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lowerPort', models.IntegerField()),
                ('upperPort', models.IntegerField()),
                ('destinationPortRange', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE,
                                                              related_name='NfpRule_DestinationPortRange',
                                                              to='NSLifecycleManagement.NfpRule')),
                ('sourcePortRange', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE,
                                                         related_name='NfpRule_SourcePortRange',
                                                         to='NSLifecycleManagement.NfpRule')),
            ],
        ),
        migrations.CreateModel(
            name='NsScaleInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nsScalingAspectId', models.TextField()),
                ('nsScaleLevelId', models.TextField()),
                ('nsScaleStatus', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                    related_name='NsInstance_NsScaleInfo',
                                                    to='NSLifecycleManagement.NsInstance')),
            ],
        ),
        migrations.CreateModel(
            name='NsMonitoringParame',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True)),
                ('performanceMetric', models.TextField()),
                ('monitoringParameter',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='NsInstance_NsMonitoringParame',
                                   to='NSLifecycleManagement.NsInstance')),
            ],
        ),
        migrations.AddField(
            model_name='nslinkportinfo',
            name='linkPort',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='NsVirtualLinkInfo_NsLinkPortInfo',
                                    to='NSLifecycleManagement.NsVirtualLinkInfo'),
        ),
        migrations.CreateModel(
            name='NsCpHandle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('vnfInstanceId', models.TextField(blank=True, null=True)),
                ('vnfExtCpInstanceId', models.TextField(blank=True, null=True)),
                ('nsInstanceId', models.TextField(blank=True, null=True)),
                ('nsSapInstanceId', models.TextField(blank=True, null=True)),
                ('nsLinkPortInfo_nsCpHandle',
                 models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                      related_name='NsLinkPortInfo_NsCpHandle',
                                      to='NSLifecycleManagement.NsLinkPortInfo')),
                ('vnffgInfo_nsCpHandle',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='VnffgInfo_NsCpHandle',
                                   to='NSLifecycleManagement.VnffgInfo')),
            ],
        ),
        migrations.AddField(
            model_name='nfpinfo',
            name='nfpInfo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='VnffgInfo_NfpInfo', to='NSLifecycleManagement.VnffgInfo'),
        ),
        migrations.CreateModel(
            name='Mask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('startingPoint', models.IntegerField()),
                ('length', models.IntegerField()),
                ('value', models.TextField()),
                ('extendedCriteria',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='NfpInfo_Mask',
                                   to='NSLifecycleManagement.NfpRule')),
            ],
        ),
        migrations.AddField(
            model_name='extlinkportinfo',
            name='extLinkPorts',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='ExtVirtualLinkInfo_ExtLinkPortInfo',
                                    to='NSLifecycleManagement.ExtVirtualLinkInfo'),
        ),
        migrations.CreateModel(
            name='CpPairInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vnfExtCpIds', models.TextField(blank=True, null=True)),
                ('sapIds', models.TextField(blank=True, null=True)),
                ('cpGroup',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='CpGroupInfo_CpPairInfo',
                                   to='NSLifecycleManagement.CpGroupInfo')),
            ],
        ),
        migrations.AddField(
            model_name='cpgroupinfo',
            name='cpGroup',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='NfpInfo_CpGroupInfo',
                                    to='NSLifecycleManagement.NfpInfo'),
        ),
        migrations.CreateModel(
            name='AffinityOrAntiAffinityRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vnfdId', models.TextField(blank=True, null=True)),
                ('vnfProfiledld', models.TextField()),
                ('vnfInstancedId', models.TextField(blank=True, null=True)),
                ('affinityOrAntiAffinity', models.TextField()),
                ('scope', models.TextField()),
                ('additionalAffinityOrAntiAffinityRule',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='NsInstance_AffinityOrAntiAffinityRule',
                                   to='NSLifecycleManagement.NsInstance')),
            ],
        ),
        migrations.AddField(
            model_name='vnfvirtuallinkresourceinfo',
            name='vnfVirtualLinkResourceInfo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='InstantiatedVnfInfo_VnfVirtualLinkResourceInfo',
                                    to='NSLifecycleManagement.InstantiatedVnfInfo'),
        ),
        migrations.CreateModel(
            name='VnfScaleInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aspectlId', models.TextField()),
                ('scaleLevel', models.TextField()),
                ('scaleStatus', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                  related_name='InstantiatedVnfInfo_VnfScaleInfo',
                                                  to='NSLifecycleManagement.InstantiatedVnfInfo')),
            ],
        ),
        migrations.CreateModel(
            name='VnfMonitoringParamet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True)),
                ('performanceMetric', models.TextField()),
                ('monitoringParameters',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='InstantiatedVnfInfo_VnfMonitoringParamet',
                                   to='NSLifecycleManagement.InstantiatedVnfInfo')),
            ],
        ),
        migrations.AddField(
            model_name='vnfextcpinfo',
            name='extCpInfo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                    related_name='InstantiatedVnfInfo_VnfExtCpInfo',
                                    to='NSLifecycleManagement.InstantiatedVnfInfo'),
        ),
        migrations.AddField(
            model_name='vnfcresourceinfo',
            name='vnfcResourceInfo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='InstantiatedVnfInfo_VnfcResourceInfo',
                                    to='NSLifecycleManagement.InstantiatedVnfInfo'),
        ),
        migrations.CreateModel(
            name='VirtualStorageResourceInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('virtualStorageDescId', models.TextField()),
                ('reservationId', models.TextField(blank=True, null=True)),
                ('metadata', models.TextField(blank=True, null=True)),
                ('virtualStorageResourceInfo',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                   related_name='InstantiatedVnfInfo_VirtualStorageResourceInfo',
                                   to='NSLifecycleManagement.InstantiatedVnfInfo')),
            ],
        ),
        migrations.AddField(
            model_name='extvirtuallinkinfo',
            name='extVirtualLinkInfo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='InstantiatedVnfInfo_ExtVirtualLinkInfo',
                                    to='NSLifecycleManagement.InstantiatedVnfInfo'),
        ),
        migrations.AddField(
            model_name='extmanagedvirtuallinkinfo',
            name='extManagedVirtualLinkInfo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='InstantiatedVnfInfo_ExtManagedVirtualLinkInfo',
                                    to='NSLifecycleManagement.InstantiatedVnfInfo'),
        ),
    ]
